.text
.globl _start
_start:b reset
			  ldr pc,_undefined_instruction
        ldr pc,_software_interrupt
        ldr pc,_prefetch_abort
        ldr pc,_data_abort
        ldr pc,_not_used
        ldr pc,_irq
        ldr pc,_fiq

_undefined_instruction:
        .word undefined_instruction
_software_interrupt:
        .word software_interrupt
_prefetch_abort:
        .word data_abort
_data_abort:
        .word data_abort
_not_used:
        .word not_used
_irq:
        .word irq
_fiq:
        .word fiq


undefined_instruction:
        nop
software_interrupt:
        nop
prefetch_abort:
        nop
data_abort:
        nop
not_used:
        nop
irq:
        nop
fiq:
        nop
reset:
        bl svc_mode
        bl remap_periport
        bl disable_watchdog
        bl disable_interrupt
        bl disable_mmu
        bl init_clock
        bl mem_init
        bl init_stack
        
        bl nand_init
        bl copy_from_nand
        bl clean_bss
        ldr pc,=wboot_main
        @bl led_on
svc_mode:
        mrs r0,cpsr
        bic r0,r0,#0x1f
        orr r0,r0,#0xd3
        msr cpsr,r0
        mov pc,lr
remap_periport:
        ldr r0,=0x70000000
        orr r0,r0,#0x13
        mcr p15,0,r0,c15,c2,4
        mov pc,lr
#define pWTCON 0x7e004000
disable_watchdog:
        ldr r0,=pWTCON
        mov r1,#0x0
        str r1,[r0]
        mov pc,lr
#define pVIC0INTENCLEAR 0x71200014
#define pVIC1INTENCLEAR 0x71300014
disable_interrupt:
        mvn r1,#0x0
        ldr r0,=pVIC0INTENCLEAR
        str r1,[r0]
        ldr r0,=pVIC1INTENCLEAR
        str r1,[r0]
        mov pc,lr
disable_mmu:
        mov r0,#0x0
        /*flush cache*/
        mcr p15,0,r0,c7,c7,0
        /*flush TLB*/
        mcr p15,0,r0,c8,c7,0
        /*disable mmu*/
        mrc p15,0,r0,c1,c0,0
        bic r0,r0,#0x5
        mcr p15,0,r0,c1,c0,0
        mov pc,lr
#define pOTHERS    0x7e00f900
#define pAPLL_LOCK 0x7e00f000
#define pMPLL_LOCK 0x7e00f004
#define pEPLL_LOCK 0x7e00f008
#define pAPLLCON   0x7e00f00c
#define pMPLLCON   0x7e00f010
#define pCLK_DIV0  0x7e00f020
#define pCLK_SRC   0x7e00f01c
#define APLL_VAL (1<<31)|(266<<16)|(3<<8)|(1<<0)
#define MPLL_VAL (1<<31)|(266<<16)|(3<<8)|(1<<0)
#define CLK_DIV (3<<12)|(1<<9)|(1<<8)|(1<<4)|(0<<0)
init_clock:
        /*set async mode*/
        ldr r0,=pOTHERS
        ldr r1,[r0]
        bic r1,r1,#0xc0
        str r1,[r0]
        /*set lock time*/
        ldr r0,=0xffff
        ldr r1,=pAPLL_LOCK
        str r1,[r0]
        ldr r1,=pMPLL_LOCK
        str r1,[r0]
        ldr r1,=pEPLL_LOCK
        str r1,[r0]
        /*set CLK_DIV ARMCLK = 533MHZ HCLKx2=266MHZ HCLK = 133MHZ PCLK = 266/4=66*/
        ldr r0,=pCLK_DIV0
        ldr r1,=CLK_DIV
        str r1,[r0]
        /*set FOUT APLL 533MHZ*/
        ldr r0,=pAPLLCON
        ldr r1,=APLL_VAL
        str r1,[r0]
        /*set FOUT MPLL 533MHZ*/
        ldr r0,=pMPLLCON
        ldr r1,=MPLL_VAL
        str r1,[r0]
        /*clk src*/
        ldr r0,=pCLK_SRC
        ldr r1,[r0]
        orr r1,r1,#0x7
        str r1,[r0]
        mov pc,lr

copy_from_nand:
        ldr r0,=_start
        mov r1,#0
        ldr r2,=bss_end
        sub r2,r2,r0
        mov r9,r2
        mov ip,lr
        bl nand_to_ram
        
        ldr r0,=_start
        ldr r1,=0x0c000000
        mov r9,#0x1000
check_copy:
        ldr r3,[r0],#4
        ldr r4,[r1],#4
        teq r3,r4
        bne led_on
        subs r9,r9,#4
        bne check_copy
           
        mov lr,ip
        mov pc,lr
init_stack:
        msr cpsr_c, #0xd2
        ldr sp, =0x53000000 //初始化r13_irq
        msr cpsr_c, #0xd3
        ldr sp,=0x54000000  //初始化r13_svc
        mov pc,lr

clean_bss:
        ldr r0,=bss_start
        ldr r1,=bss_end
        mov r2,#0x0
        cmp r0,r1
        moveq pc,lr
clean_loop:
        str r2,[r0],#4
        cmp r0,r1
        bne clean_loop
        mov pc,lr
#define pGPMCON 0x7f008820
#define pGPMDAT 0x7f008824
.globl led_on
led_on:
        ldr r0,=pGPMCON
        ldr r1,=0x1111
        str r1,[r0]
        ldr r0,=pGPMDAT
        ldr r1,=0x5/*0b1010*/
        str r1,[r0]
        @mov pc,lr

